import * as hast from 'hast';
import * as shikiji from 'shikiji';
import { StringLiteralUnion, BuiltinTheme, BundledHighlighterOptions, BuiltinLanguage, ThemeRegistrationRaw, ThemeRegistration, LanguageRegistration, IRawGrammar, CodeOptionsSingleTheme, CodeOptionsMultipleThemes, CodeToHastOptionsCommon, CodeToThemedTokensOptions, ThemedToken, ThemeInput } from 'shikiji';
export { toShikiTheme } from 'shikiji';

interface LineOption {
    /**
     * 1-based line number.
     */
    line: number;
    classes?: string[];
}
interface OptionsOfLineOptions {
    lineOptions?: LineOption[];
}
interface AnsiToHtmlOptions extends OptionsOfLineOptions {
    theme?: StringLiteralUnion<BuiltinTheme>;
}
interface HighlighterOptions extends BundledHighlighterOptions<BuiltinLanguage, BuiltinTheme> {
    theme?: BuiltinTheme;
}
type IThemeRegistration = ThemeRegistrationRaw | ThemeRegistration | StringLiteralUnion<BuiltinTheme>;
interface IShikiTheme extends ThemeRegistration {
}
interface ILanguageRegistration extends LanguageRegistration {
    grammar?: IRawGrammar;
}
type Lang = StringLiteralUnion<BuiltinLanguage>;
type Theme = StringLiteralUnion<BuiltinTheme>;
type CodeToHtmlOptions = (Partial<CodeOptionsSingleTheme<BuiltinTheme>> | Partial<CodeOptionsMultipleThemes<BuiltinTheme>>) & CodeToHastOptionsCommon<BuiltinLanguage> & OptionsOfLineOptions;
type CodeToHtmlOptionsExtra = Omit<CodeToHastOptionsCommon<BuiltinLanguage>, 'lang'> & OptionsOfLineOptions;

declare const setCDN: () => void;
declare const setOnigasmWASM: () => void;
declare const setWasm: () => void;
declare const setColorReplacements: () => void;

declare const BUNDLED_LANGUAGES: {
    bash: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    batch: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    be: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    'c#': () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    'c++': () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    cdc: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    clj: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    cmd: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    console: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    cql: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    cs: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    dockerfile: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    erl: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    'f#': () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    fs: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    fsl: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    gjs: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    gql: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    gts: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    hbs: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    hs: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    jade: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    js: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    kql: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    kt: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    kts: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    makefile: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    md: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    nar: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    nf: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    objc: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    perl6: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    properties: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    ps: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    ps1: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    py: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    ql: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    rb: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    rs: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    sh: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    shader: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    shell: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    spl: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    styl: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    ts: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    vim: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    vimscript: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    vy: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    yml: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    zsh: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    文言: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    abap: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    'actionscript-3': () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    ada: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    apache: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    apex: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    apl: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    applescript: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    ara: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    asm: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    astro: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    awk: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    ballerina: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    bat: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    beancount: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    berry: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    bibtex: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    bicep: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    blade: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    c: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    cadence: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    clarity: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    clojure: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    cmake: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    cobol: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    codeql: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    coffee: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    cpp: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    crystal: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    csharp: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    css: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    cue: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    cypher: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    d: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    dart: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    dax: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    diff: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    docker: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    'dream-maker': () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    elixir: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    elm: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    erb: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    erlang: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    fish: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    fsharp: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    gdresource: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    gdscript: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    gdshader: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    gherkin: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    'git-commit': () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    'git-rebase': () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    'glimmer-js': () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    'glimmer-ts': () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    glsl: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    gnuplot: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    go: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    graphql: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    groovy: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    hack: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    haml: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    handlebars: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    haskell: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    hcl: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    hjson: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    hlsl: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    html: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    http: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    imba: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    ini: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    java: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    javascript: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    'jinja-html': () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    jison: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    json: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    json5: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    jsonc: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    jsonl: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    jsonnet: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    jssm: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    jsx: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    julia: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    kotlin: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    kusto: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    latex: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    less: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    liquid: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    lisp: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    logo: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    lua: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    make: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    markdown: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    marko: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    matlab: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    mdc: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    mdx: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    mermaid: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    mojo: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    narrat: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    nextflow: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    nginx: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    nim: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    nix: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    'objective-c': () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    'objective-cpp': () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    ocaml: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    pascal: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    perl: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    php: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    plsql: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    postcss: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    powerquery: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    powershell: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    prisma: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    prolog: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    proto: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    pug: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    puppet: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    purescript: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    python: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    r: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    raku: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    razor: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    reg: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    rel: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    riscv: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    rst: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    ruby: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    rust: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    sas: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    sass: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    scala: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    scheme: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    scss: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    shaderlab: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    shellscript: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    shellsession: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    smalltalk: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    solidity: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    sparql: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    splunk: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    sql: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    'ssh-config': () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    stata: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    stylus: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    svelte: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    swift: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    'system-verilog': () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    tasl: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    tcl: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    tex: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    toml: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    tsx: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    turtle: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    twig: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    typescript: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    v: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    vb: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    verilog: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    vhdl: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    viml: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    vue: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    'vue-html': () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    vyper: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    wasm: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    wenyan: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    wgsl: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    wolfram: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    xml: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    xsl: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    yaml: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    zenscript: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
    zig: () => Promise<{
        default: shikiji.LanguageRegistration[];
    }>;
};
declare const BUNDLED_THEMES: {
    "css-variables": () => Promise<{
        default: shikiji.ThemeRegistrationRaw;
    }>;
    "dark-plus": () => Promise<{
        default: shikiji.ThemeRegistrationRaw;
    }>;
    dracula: () => Promise<{
        default: shikiji.ThemeRegistrationRaw;
    }>;
    "dracula-soft": () => Promise<{
        default: shikiji.ThemeRegistrationRaw;
    }>;
    "github-dark": () => Promise<{
        default: shikiji.ThemeRegistrationRaw;
    }>;
    "github-dark-dimmed": () => Promise<{
        default: shikiji.ThemeRegistrationRaw;
    }>;
    "github-light": () => Promise<{
        default: shikiji.ThemeRegistrationRaw;
    }>;
    hc_light: () => Promise<{
        default: shikiji.ThemeRegistrationRaw;
    }>;
    "light-plus": () => Promise<{
        default: shikiji.ThemeRegistrationRaw;
    }>;
    "material-theme": () => Promise<{
        default: shikiji.ThemeRegistrationRaw;
    }>;
    "material-theme-darker": () => Promise<{
        default: shikiji.ThemeRegistrationRaw;
    }>;
    "material-theme-lighter": () => Promise<{
        default: shikiji.ThemeRegistrationRaw;
    }>;
    "material-theme-ocean": () => Promise<{
        default: shikiji.ThemeRegistrationRaw;
    }>;
    "material-theme-palenight": () => Promise<{
        default: shikiji.ThemeRegistrationRaw;
    }>;
    "min-dark": () => Promise<{
        default: shikiji.ThemeRegistrationRaw;
    }>;
    "min-light": () => Promise<{
        default: shikiji.ThemeRegistrationRaw;
    }>;
    monokai: () => Promise<{
        default: shikiji.ThemeRegistrationRaw;
    }>;
    nord: () => Promise<{
        default: shikiji.ThemeRegistrationRaw;
    }>;
    "one-dark-pro": () => Promise<{
        default: shikiji.ThemeRegistrationRaw;
    }>;
    poimandres: () => Promise<{
        default: shikiji.ThemeRegistrationRaw;
    }>;
    "rose-pine": () => Promise<{
        default: shikiji.ThemeRegistrationRaw;
    }>;
    "rose-pine-dawn": () => Promise<{
        default: shikiji.ThemeRegistrationRaw;
    }>;
    "rose-pine-moon": () => Promise<{
        default: shikiji.ThemeRegistrationRaw;
    }>;
    "slack-dark": () => Promise<{
        default: shikiji.ThemeRegistrationRaw;
    }>;
    "slack-ochin": () => Promise<{
        default: shikiji.ThemeRegistrationRaw;
    }>;
    "solarized-dark": () => Promise<{
        default: shikiji.ThemeRegistrationRaw;
    }>;
    "solarized-light": () => Promise<{
        default: shikiji.ThemeRegistrationRaw;
    }>;
    "vitesse-dark": () => Promise<{
        default: shikiji.ThemeRegistrationRaw;
    }>;
    "vitesse-light": () => Promise<{
        default: shikiji.ThemeRegistrationRaw;
    }>;
};

declare function getHighlighter(options?: HighlighterOptions): Promise<{
    codeToThemedTokens: {
        (code: string, options: CodeToThemedTokensOptions<BuiltinLanguage, BuiltinTheme>): ThemedToken[][];
        (code: string, lang: BuiltinLanguage, theme?: BuiltinTheme): ThemedToken[][];
    };
    codeToHtml: {
        (code: string, options: CodeToHtmlOptions): string;
        (code: string, lang: StringLiteralUnion<BuiltinLanguage>, theme?: StringLiteralUnion<BuiltinTheme>, options?: CodeToHtmlOptionsExtra): string;
    };
    ansiToHtml(code: string, options?: AnsiToHtmlOptions): string;
    codeToTokensWithThemes(code: string, options: shikiji.CodeToTokensWithThemesOptions<string, string>): [color: string, theme: string, tokens: ThemedToken[][]][];
    codeToHast(code: string, options: shikiji.CodeToHastOptions<string, string>): hast.Root;
    loadTheme(...themes: ("css-variables" | "dark-plus" | "dracula" | "dracula-soft" | "github-dark" | "github-dark-dimmed" | "github-light" | "hc_light" | "light-plus" | "material-theme" | "material-theme-darker" | "material-theme-lighter" | "material-theme-ocean" | "material-theme-palenight" | "min-dark" | "min-light" | "monokai" | "nord" | "one-dark-pro" | "poimandres" | "rose-pine" | "rose-pine-dawn" | "rose-pine-moon" | "slack-dark" | "slack-ochin" | "solarized-dark" | "solarized-light" | "vitesse-dark" | "vitesse-light" | ThemeInput)[]): Promise<void>;
    loadLanguage(...langs: ("shellscript" | "bat" | "berry" | "csharp" | "cpp" | "cadence" | "clojure" | "vb" | "shellsession" | "cypher" | "docker" | "erlang" | "fsharp" | "jssm" | "glimmer-js" | "graphql" | "glimmer-ts" | "handlebars" | "haskell" | "pug" | "javascript" | "kusto" | "kotlin" | "make" | "markdown" | "narrat" | "nextflow" | "objective-c" | "raku" | "ini" | "powershell" | "python" | "codeql" | "ruby" | "rust" | "shaderlab" | "splunk" | "stylus" | "typescript" | "viml" | "vyper" | "yaml" | "wenyan" | "bash" | "batch" | "be" | "c#" | "c++" | "cdc" | "clj" | "cmd" | "console" | "cql" | "cs" | "dockerfile" | "erl" | "f#" | "fs" | "fsl" | "gjs" | "gql" | "gts" | "hbs" | "hs" | "jade" | "js" | "kql" | "kt" | "kts" | "makefile" | "md" | "nar" | "nf" | "objc" | "perl6" | "properties" | "ps" | "ps1" | "py" | "ql" | "rb" | "rs" | "sh" | "shader" | "shell" | "spl" | "styl" | "ts" | "vim" | "vimscript" | "vy" | "yml" | "zsh" | "文言" | "abap" | "actionscript-3" | "ada" | "apache" | "apex" | "apl" | "applescript" | "ara" | "asm" | "astro" | "awk" | "ballerina" | "beancount" | "bibtex" | "bicep" | "blade" | "c" | "clarity" | "cmake" | "cobol" | "coffee" | "crystal" | "css" | "cue" | "d" | "dart" | "dax" | "diff" | "dream-maker" | "elixir" | "elm" | "erb" | "fish" | "gdresource" | "gdscript" | "gdshader" | "gherkin" | "git-commit" | "git-rebase" | "glsl" | "gnuplot" | "go" | "groovy" | "hack" | "haml" | "hcl" | "hjson" | "hlsl" | "html" | "http" | "imba" | "java" | "jinja-html" | "jison" | "json" | "json5" | "jsonc" | "jsonl" | "jsonnet" | "jsx" | "julia" | "latex" | "less" | "liquid" | "lisp" | "logo" | "lua" | "marko" | "matlab" | "mdc" | "mdx" | "mermaid" | "mojo" | "nginx" | "nim" | "nix" | "objective-cpp" | "ocaml" | "pascal" | "perl" | "php" | "plsql" | "postcss" | "powerquery" | "prisma" | "prolog" | "proto" | "puppet" | "purescript" | "r" | "razor" | "reg" | "rel" | "riscv" | "rst" | "sas" | "sass" | "scala" | "scheme" | "scss" | "smalltalk" | "solidity" | "sparql" | "sql" | "ssh-config" | "stata" | "svelte" | "swift" | "system-verilog" | "tasl" | "tcl" | "tex" | "toml" | "tsx" | "turtle" | "twig" | "v" | "verilog" | "vhdl" | "vue" | "vue-html" | "wasm" | "wgsl" | "wolfram" | "xml" | "xsl" | "zenscript" | "zig" | shikiji.LanguageInput | shikiji.SpecialLanguage)[]): Promise<void>;
    getTheme(name: string | ThemeRegistration | shikiji.ThemeRegistrationRaw): ThemeRegistration;
    getLoadedLanguages(): string[];
    getLoadedThemes(): string[];
}>;
type Highlighter = Awaited<ReturnType<typeof getHighlighter>>;
declare function loadTheme(theme: BuiltinTheme | ThemeInput): Promise<ThemeRegistration>;

export { type AnsiToHtmlOptions, BUNDLED_LANGUAGES, BUNDLED_THEMES, type CodeToHtmlOptions, type CodeToHtmlOptionsExtra, type Highlighter, type HighlighterOptions, type ILanguageRegistration, type IShikiTheme, type IThemeRegistration, type Lang, type LineOption, type OptionsOfLineOptions, type Theme, getHighlighter as default, getHighlighter, loadTheme, setCDN, setColorReplacements, setOnigasmWASM, setWasm };
