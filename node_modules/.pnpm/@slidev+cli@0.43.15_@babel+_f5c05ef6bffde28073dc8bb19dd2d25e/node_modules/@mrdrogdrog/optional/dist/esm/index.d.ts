export declare class Optional<T> {
    private value?;
    private constructor();
    static empty<T>(): Optional<T>;
    static of<T>(value: T): Optional<T>;
    static ofNullable<T>(value: T | null | undefined): Optional<T>;
    get(): T;
    isPresent(): boolean;
    isEmpty(): boolean;
    ifPresent(consumer: (value: T) => void): void;
    ifPresentOrElse(presentAction: (value: T) => void, emptyAction: () => void): void;
    filter(predicate: (value: T) => boolean): Optional<T>;
    map<U>(mapper: (value: T) => U | undefined | null): Optional<U>;
    flatMap<U>(mapper: (value: T) => Optional<U>): Optional<U>;
    orElse<U>(other: U): U | T;
    orElseGet<U>(supplier: () => U): U | T;
    orElseThrow(exceptionSupplier: () => Error): T;
    or<U>(optionalSupplier: () => Optional<U>): Optional<T | U>;
    orThrow(exceptionSupplier: () => Error): Optional<T>;
    guard(predicate: (value: T) => boolean, exceptionSupplier: () => Error): Optional<T>;
    wrapInArray(): [T] | [];
}
