import {
  loadSetups
} from "./chunk-CYLMMBRG.mjs";
import {
  resolveImportPath
} from "./chunk-5L3XKTHL.mjs";

// node/plugins/windicss.ts
import { dirname, resolve } from "node:path";
import { existsSync } from "node:fs";
import { fileURLToPath } from "node:url";
import { slash, uniq } from "@antfu/utils";
import jiti from "jiti";
async function createWindiCSSPlugin({ themeRoots, addonRoots, clientRoot, userRoot, roots, data }, { windicss: windiOptions }) {
  const { default: WindiCSS } = await import("vite-plugin-windicss");
  const { defaultConfigureFiles } = await import("@windicss/config");
  const configFiles = uniq([
    ...defaultConfigureFiles.map((i) => resolve(userRoot, i)),
    ...themeRoots.map((i) => `${i}/windi.config.ts`),
    ...addonRoots.map((i) => `${i}/windi.config.ts`),
    resolve(clientRoot, "windi.config.ts")
  ]);
  const configFile = configFiles.find((i) => existsSync(i));
  let config = jiti(fileURLToPath(import.meta.url))(configFile);
  if (config.default)
    config = config.default;
  config = await loadSetups(roots, "windicss.ts", {}, config, true);
  return WindiCSS(
    {
      configFiles: [configFile],
      config,
      onConfigResolved(config2) {
        if (!config2.theme)
          config2.theme = {};
        if (!config2.theme.extend)
          config2.theme.extend = {};
        if (!config2.theme.extend.fontFamily)
          config2.theme.extend.fontFamily = {};
        const fontFamily = config2.theme.extend.fontFamily;
        fontFamily.sans ||= data.config.fonts.sans.join(",");
        fontFamily.mono ||= data.config.fonts.mono.join(",");
        fontFamily.serif ||= data.config.fonts.serif.join(",");
        return config2;
      },
      onOptionsResolved(config2) {
        themeRoots.forEach((i) => {
          config2.scanOptions.include.push(`${i}/components/**/*.{vue,ts}`);
          config2.scanOptions.include.push(`${i}/layouts/**/*.{vue,ts}`);
        });
        addonRoots.forEach((i) => {
          config2.scanOptions.include.push(`${i}/components/**/*.{vue,ts}`);
          config2.scanOptions.include.push(`${i}/layouts/**/*.{vue,ts}`);
        });
        config2.scanOptions.include.push(`!${slash(resolve(userRoot, "node_modules"))}`);
        config2.scanOptions.exclude.push(dirname(resolveImportPath("monaco-editor/package.json", true)));
        config2.scanOptions.exclude.push(dirname(resolveImportPath("katex/package.json", true)));
        config2.scanOptions.exclude.push(dirname(resolveImportPath("prettier/package.json", true)));
      },
      ...windiOptions
    }
  );
}

export {
  createWindiCSSPlugin
};
