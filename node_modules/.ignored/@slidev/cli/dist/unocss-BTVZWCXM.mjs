import {
  loadSetups
} from "./chunk-CYLMMBRG.mjs";
import "./chunk-65ITIFTL.mjs";

// node/plugins/unocss.ts
import { resolve } from "node:path";
import { existsSync } from "node:fs";
import { fileURLToPath } from "node:url";
import { uniq } from "@antfu/utils";
import { mergeConfigs } from "unocss";
import jiti from "jiti";
import UnoCSS from "unocss/vite";
async function createUnocssPlugin({ themeRoots, addonRoots, clientRoot, roots, userRoot, data }, { unocss: unoOptions = {} }) {
  const configFiles = uniq([
    resolve(userRoot, "uno.config.ts"),
    resolve(userRoot, "unocss.config.ts"),
    ...themeRoots.map((i) => `${i}/uno.config.ts`),
    ...themeRoots.map((i) => `${i}/unocss.config.ts`),
    ...addonRoots.map((i) => `${i}/uno.config.ts`),
    ...addonRoots.map((i) => `${i}/unocss.config.ts`),
    resolve(clientRoot, "uno.config.ts"),
    resolve(clientRoot, "unocss.config.ts")
  ]).filter((i) => existsSync(i));
  const configs = configFiles.map((i) => {
    const loaded = jiti(fileURLToPath(import.meta.url))(i);
    const config2 = "default" in loaded ? loaded.default : loaded;
    return config2;
  }).filter(Boolean);
  configs.reverse();
  let config = mergeConfigs([...configs, unoOptions]);
  config = await loadSetups(roots, "unocss.ts", {}, config, (a, b) => mergeConfigs([a, b]));
  config.theme ||= {};
  config.theme.fontFamily ||= {};
  config.theme.fontFamily.sans ||= data.config.fonts.sans.join(",");
  config.theme.fontFamily.mono ||= data.config.fonts.mono.join(",");
  config.theme.fontFamily.serif ||= data.config.fonts.serif.join(",");
  return UnoCSS({
    configFile: false,
    configDeps: configFiles,
    ...config
  });
}
export {
  createUnocssPlugin
};
